{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHanlder","event","controlName","updatedControls","updateObject","target","checkValidity","setState","switchAuthModeHandler","prevState","submitHandler","preventDefault","props","onAuth","this","buildBurger","authRedirectPath","onSetAuthRedirectPath","formElements","key","push","id","config","form","map","formElement","elementtype","changed","shouldValidate","invalid","loading","errorMsg","error","redirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","idToken","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.ffe3ae97.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport {Redirect} from 'react-router-dom'\nimport Input from '../../components/UI/Input/Input';\nimport Button from '../../components/UI/Button/Button';\nimport Spinner from '../../components/UI/Spinner/Spinners'\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index'\nimport updateObject, {checkValidity} from '../../shared/utility'\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Mail Address'\n                }\n                , value: ''\n                , validation: {\n                    required: true,\n                    isEmail: true\n                }\n                , valid: false\n                , touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password'\n                }\n                , value: ''\n                , validation: {\n                    required: true,\n                    minLength: 6\n                }\n                , valid: false\n                , touched: false\n            },\n        }\n        , isSignup: true\n    }\n\n    componentDidMount() {\n        if(!this.props.buildBurger && this.props.authRedirectPath !== '/') {\n            this.props.onSetAuthRedirectPath();\n        }\n    }\n\n    inputChangedHanlder = (event, controlName) => {\n        const updatedControls = updateObject(this.state.controls, {\n            [controlName] : updateObject(this.state.controls[controlName], {\n                value: event.target.value,\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        this.setState({controls: updatedControls});\n    }\n\n    \n\n    switchAuthModeHandler = () => {\n        this.setState(prevState => {\n            return {isSignup: !prevState.isSignup}\n        });\n    }\n\n    submitHandler = (event) => {\n        event.preventDefault();\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup);\n    }\n\n    render () {\n\n        const formElements = [];\n        for(let key in this.state.controls) {\n            formElements.push({\n                id: key,\n                config: this.state.controls[key]\n            });\n        }\n\n        let form = formElements.map(formElement => \n            <Input \n                key={formElement.id} \n                elementtype={formElement.config.elementType}\n                elementConfig={formElement.config.elementConfig}\n                value={formElement.config.value} \n                changed={(event) => this.inputChangedHanlder(event, formElement.id)}\n                shouldValidate={formElement.config.validation}\n                invalid={!formElement.config.valid}\n                touched={formElement.config.touched}/>\n        );\n        if(this.props.loading) {\n            form = <Spinner />\n        }\n\n        let errorMsg = null;\n        if(this.props.error) {\n            errorMsg = this.props.error;\n        }\n\n        let redirect = null;\n        if(this.props.isAuthenticated) {\n            redirect = <Redirect to={this.props.authRedirectPath} />\n        }\n\n        return (\n            <div className={classes.Auth}>\n                {redirect}\n                {errorMsg}\n                <form onSubmit={this.submitHandler}>\n                    {form}\n                    <Button btnType=\"Success\">SUBMIT</Button>\n                </form>\n                <Button \n                    clicked={this.switchAuthModeHandler}\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? \"SIGNIN\" : \"SIGNUP\"}</Button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.idToken !== null,\n        buildBurger: state.burgerBuilder.building,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignup) => dispatch(actions.auth(email, password, isSignup)),\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react'\nimport classes from './Input.module.css'\n\nconst input = (props) => {\n    let inputElement = null;\n    const inputClasses = [classes.InputElement]\n    if(props.invalid && props.shouldValidate && props.touched) {\n        inputClasses.push(classes.Invalid);\n    }\n    switch(props.elementtype) {\n        case 'input':\n            inputElement = <input \n                                onChange={props.changed}\n                                value={props.value}\n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} />;\n            break;\n        case 'textarea': \n            inputElement = <textarea \n                                onChange={props.changed}\n                                className={inputClasses.join(' ')} \n                                {...props.elementConfig} />;\n            break;\n        case 'select': \n            inputElement = (\n                            <select\n                                onChange={props.changed}\n                                className={inputClasses.join(' ')} \n                                value={props.value}>\n                                    {props.elementConfig.options.map(option => (\n                                        <option key={option.value} value={option.value}>{option.displayValue}</option>\n                                    ))}\n                            </select>\n            );\n            break;\n        default:\n            inputElement = <input \n                                onChange={props.changed}\n                                value={props.value}\n                                className={inputClasses.join(' ')} \n                                {...props} />\n    }\n    return (\n        <div className={classes.Input}>\n            <label className={classes.Label}>{props.label}</label>\n            {inputElement}\n        </div>\n    )\n}\n\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3r5Ke\",\"Label\":\"Input_Label__1qyHr\",\"InputElement\":\"Input_InputElement__2m88K\",\"Invalid\":\"Input_Invalid__16Mis\"};"],"sourceRoot":""}